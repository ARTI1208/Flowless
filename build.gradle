plugins {
    id 'java'
    id 'eclipse'
    id 'maven'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.22.0'

    id 'org.openjfx.javafxplugin' version '0.0.9'
}

version = '0.6.2-SNAPSHOT'

repositories {
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }
}

sourceCompatibility = '11'
targetCompatibility = '11'

group = 'org.fxmisc.flowless'
project.archivesBaseName = 'flowless'

dependencies {

    implementation 'com.github.ARTI1208:ReactFX:v3.0.1-modularity'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.testfx:testfx-core:4.0.11-alpha"
    testCompile ("org.testfx:testfx-junit:4.0.11-alpha") {
        exclude(group: "junit", module: "junit")
    }
    testCompile "org.testfx:openjfx-monocle:8u76-b04"
}

javafx {
    version = "15.0.1"
    modules = [ 'javafx.graphics', 'javafx.controls' ]
}

javadoc {
    // ignore missing Javadoc comments or tags
    options.addStringOption('Xdoclint:all,-missing', '-quiet')

    // support for JavaFX properties
    options.addBooleanOption('javafx', true)

    options.links = [
            // resolve links to Java and JavaFX Javadocs
            'http://docs.oracle.com/javase/8/docs/api/',
            'http://docs.oracle.com/javase/8/javafx/api/',

            // resolve links to ReactFX
            'http://www.reactfx.org/javadoc/2.0-M5/'
    ]
}

task fatJar(type: Jar, dependsOn: classes) {
    appendix = 'fat'
    from sourceSets.main.output
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar

    archives javadocJar
    archives sourcesJar
}

signing {
    sign configurations.archives
}

signArchives.onlyIf {
    project.hasProperty('signing.keyId') && project.hasProperty('signing.password') && project.hasProperty('signing.secretKeyRingFile')
}

def doUploadArchives = project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')

if(doUploadArchives) {
    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: sonatypeUsername, password: sonatypePassword)
            }

            pom.project {
                name 'Flowless'
                description 'Efficient VirtualFlow for JavaFX.'
                url 'http://www.fxmisc.org/flowless/'
                packaging 'jar'
                licenses {
                    license {
                        name 'The BSD 2-Clause License'
                        url 'http://opensource.org/licenses/BSD-2-Clause'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'scm:git@github.com:FXMisc/Flowless.git'
                    connection 'scm:git@github.com:FXMisc/Flowless.git'
                    developerConnection 'scm:git@github.com:FXMisc/Flowless.git'
                }
                developers {
                    developer {
                        name 'Tomas Mikula'
                    }
                    developer {
                        name 'Jordan Martinez'
                    }
                }
            }
        }
    }
}

uploadArchives.onlyIf { doUploadArchives }

assemble.dependsOn fatJar

task getVersion {
    doLast {
        println version
    }
}

nexusStaging {
    packageGroup = "org.fxmisc.flowless"
}
